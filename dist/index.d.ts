import './patchCBOR';
import { Buffer } from 'buffer/';
import { Bytes } from './registry/Bytes';
import { CryptoCoinInfo, Network as CryptoCoinInfoNetwork } from './registry/CryptoCoinInfo';
import { CryptoPsbt } from './registry/CryptoPsbt';
import { RegistryItem } from './registry/RegistryItem';
import { RegistryType } from './registry/RegistryType';
import { addReader, addSemanticDecode, addSemanticEncode, addWriter, decodeToDataItem, encodeDataItem } from './cbor';
import { patchTags } from './cbor/utils';
import { CryptoKeypath, PathComponent } from './registry/CryptoKeyPath';
import { CryptoHDKey } from './registry/CryptoHdKey';
import { CryptoGspl } from './registry/CryptoGspl';
import { CryptoTxElement } from './registry/CryptoTxElement';
import { CryptoTxEntity } from './registry/CryptoTxEntity';
import { URRegistryDecoder } from './decoder';
export { DataItem } from './cbor';
export { generateUuidStr, uuidStringify } from './utils/uuid';
declare const extend: {
    RegistryType: typeof RegistryType;
    RegistryTypes: {
        UUID: RegistryType;
        BYTES: RegistryType;
        CRYPTO_HDKEY: RegistryType;
        CRYPTO_KEYPATH: RegistryType;
        CRYPTO_COIN_INFO: RegistryType;
        CRYPTO_ECKEY: RegistryType;
        CRYPTO_ADDRESS: RegistryType;
        CRYPTO_OUTPUT: RegistryType;
        CRYPTO_PSBT: RegistryType;
        CRYPTO_ACCOUNT: RegistryType;
    };
    RegistryItem: typeof RegistryItem;
    ExtendedRegistryTypes: {
        CRYPTO_MULTI_ACCOUNTS: RegistryType;
        QR_HARDWARE_CALL: RegistryType;
        KEY_DERIVATION_CALL: RegistryType;
        KEY_DERIVATION_SCHEMA: RegistryType;
        GS_SIGN_REQUEST: RegistryType;
        GS_SIGNATURE: RegistryType;
        GS_VERIFY_REQUEST: RegistryType;
        GS_VERIFY_RESPONSE: RegistryType;
        CRYPTO_TXELEMENT: RegistryType;
        CRYPTO_GSPL: RegistryType;
        CRYPTO_TXENTITY: RegistryType;
        ETH_SIGN_REQUEST: RegistryType;
        ETH_SIGNATURE: RegistryType;
        ETH_NFT_ITEM: RegistryType;
        PSBT_SIGN_REQUEST: RegistryType;
        PSBT_SIGNATURE: RegistryType;
        BTC_SIGN_REQUEST: RegistryType;
        BTC_SIGNATURE: RegistryType;
        ALPH_SIGN_REQUEST: RegistryType;
        ALPH_SIGNATURE: RegistryType;
        BTC_INSCRIBE_REQUEST: RegistryType;
        BTC_INSCRIBE_SIGNATURE: RegistryType;
        SOL_SIGN_REQUEST: RegistryType;
        SOL_SIGNATURE: RegistryType;
        SOL_NFT_ITEM: RegistryType;
        COSMOS_SIGN_REQUEST: RegistryType;
        COSMOS_SIGNATURE: RegistryType;
        TRON_SIGN_REQUEST: RegistryType;
        TRON_SIGNATURE: RegistryType;
    };
    decodeToDataItem: typeof decodeToDataItem;
    encodeDataItem: typeof encodeDataItem;
    cbor: {
        addReader: typeof addReader;
        addSemanticDecode: typeof addSemanticDecode;
        addSemanticEncode: typeof addSemanticEncode;
        addWriter: typeof addWriter;
        patchTags: (tags: number[]) => void;
    };
};
export { Bytes, CryptoTxEntity, CryptoTxElement, CryptoGspl, CryptoHDKey, CryptoKeypath, CryptoCoinInfo, CryptoCoinInfoNetwork, CryptoPsbt, PathComponent, extend, Buffer, URRegistryDecoder, };
export { patchTags };
export * as format from './utils/format';
export { UR } from "@ngraveio/bc-ur";
export * from './cbor';
export * from './patchCBOR';
export * from './registry/CryptoGspl';
export * from './registry/eth/EthSignRequest';
export * from './registry/eth/EthSignature';
export * from './registry/sol/SolSignRequest';
export * from './registry/sol/SolSignature';
export * from './registry/alph/AlphSignRequest';
export * from './registry/alph/AlphSignature';
export * from './registry/btc/BtcSignRequest';
export * from './registry/btc/BtcSignature';
export * from './registry/btc/PsbtSignRequest';
export * from './registry/btc/PsbtSignature';
export * from './registry/btc/BtcInscribeRequest';
export * from './registry/btc/BtcInscribeSignature';
export * from './registry/cosmos/CosmosSignRequest';
export * from './registry/cosmos/CosmosSignature';
export * from './registry/tron/TronSignRequest';
export * from './registry/tron/TronSignature';
export * from './registry/gs-basic-chain/GsSignRequest';
export * from './registry/gs-basic-chain/GsSignature';
export * from './registry/verify/GsVerifyRequest';
export * from './registry/verify/GsVerifyResponse';
export * from './registry/RegistryItem';
export * from './registry/RegistryType';
export * from './keyring/wallet/multiAccount';
export * from './keyring/chain/alph';
export * from './keyring/chain/btc';
export * from './keyring/chain/psbt';
export * from './keyring/chain/cosmos';
export * from './keyring/chain/ethereum';
export * from './keyring/chain/sol';
export * from './keyring/chain/tron';
